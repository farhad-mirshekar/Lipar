@model Lipar.Web.Models.General.MenuModel
@using Lipar.Entities.Domain.Organization.Enums
@using Lipar.Entities.Domain.Core.Enums
@using Lipar.Core.ReadingTime
@{
    var genderTitle = string.Empty;
}
<div class="header-upper">
    <div class="container">
        <div class="d-flex flex-row">
            <div class="flex-grow-1">
                <div class="header-links-wrapper">
                    <div class="header-links">
                        <ul>
                            @if (Model.UserHeaderLink.IsAuthenticated)
                            {
                                if (Model.UserHeaderLink.GenderId != 0)
                                {
                                    switch (Model.UserHeaderLink.GenderId)
                                    {
                                        case (int)GenderTypeEnum.Men:
                                            genderTitle = @T("Commom.Male").Text;
                                            break;
                                        case (int)GenderTypeEnum.Woman:
                                            genderTitle = @T("Commom.Female").Text;
                                            break;
                                    }
                                }

                                <span class="text-info">
                                    @string.Format("{0} {1} {2}" , genderTitle , Model.UserHeaderLink.UserInfo , T("Commom.Wellcome").Text)
                                </span>
                                switch (Model.UserHeaderLink.UserTypeId)
                                {
                                    case (int)UserTypeEnum.Admin:
                                        <li><a href="@Url.Action("Index","Home",new {Area="Admin" })" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
                                        break;
                                        case (int)UserTypeEnum.Customer:
                                        <li><a href="@Url.Action("Index","Home",new {Area="Dashboard" })" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
                                        break;
                                }
                                <li>
                                    <form action="/Account/Logout">
                                        <button class="mt-2 logout" type="submit">
                                            <i class="fa fa-sign-out" aria-hidden="true"></i>
                                            @T("Account.Logout")
                                        </button>
                                    </form>
                                </li>
                            }
                            else
                            {
                                var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                                ? url.ToString()
                                : string.Empty;

                                <li><a href="@Url.RouteUrl("Register")" class="ico-register">@T("Account.Register")</a></li>
                                <li><a href="@Url.RouteUrl("Login")" class="ico-login">@T("Account.Login")</a></li>
                            }
                        </ul>
                    </div>

                </div>
            </div>

            <div class="text-center mt-1 p-2">@await Component.InvokeAsync("LanguageSelector")</div>
            <div class="text-center mt-1 p-2">@await Component.InvokeAsync("MiniShoppingCart")</div>
        </div>
    </div>
</div>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">اولین سایت</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            @if (Model.StaticPages != null && Model.StaticPages.Count > 0)
            {
                foreach (var staticPage in Model.StaticPages)
                {
                    <li class="nav-item p-1">
                        <a href="@Url.RouteUrl("StaticPageDetail" , new { EntityName = "page" , SeName = CalculateWordsCount.CleanSeoUrl(staticPage.Title)})">@staticPage.Title</a>
                    </li>
                }
            }
            @if (Model.dynamicPages != null && Model.dynamicPages.Count > 0)
            {
                foreach (var dynamicPage in Model.dynamicPages)
                {
                    <li class="nav-item p-1">
                        <a href="@Url.RouteUrl("DynamicPageDetail" , new { EntityName = "page" , SeName = CalculateWordsCount.CleanSeoUrl(dynamicPage.Title)})">@dynamicPage.Title</a>
                    </li>
                }
            }

            <li class="nav-item p-1">
                <a href="@Url.RouteUrl("ContactUs")">@T("Web.Menu.ContactUs")</a>
            </li>
        </ul>
    </div>
</nav>