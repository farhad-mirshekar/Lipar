// <auto-generated />
using System;
using Lipar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lipar.Data.Migrations
{
    [DbContext(typeof(LiparContext))]
    [Migration("20220609095355_add-attribute-name-in-order-detail-attribute")]
    partial class addattributenameinorderdetailattribute
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Lipar.Entities.Domain.Application.AttributeControlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("AttributeControlTypes", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnabledTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.DeliveryDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnabledTypeId");

                    b.ToTable("DeliveryDates", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.DiscountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<decimal?>("ShoppingCartRate")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<Guid>("UserAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankPortId");

                    b.HasIndex("UserAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryDateName")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int?>("DeliveryDatePriority")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCategoryName")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<decimal?>("ProductDiscountPrice")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<int?>("ProductDiscountTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShippingCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingCostName")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int?>("ShippingCostPriority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.OrderDetailAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<Guid>("ProductAttributeMappingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAttributeValueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("OrderDetailAttributes", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.OrderPaymentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderPaymentStatusTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReservationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatus")
                        .HasColumnType("int");

                    b.Property<string>("RetrivalRefNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShoppingCartItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SignData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemTraceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankPortId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderPaymentStatuses", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowCustomerReviews")
                        .HasColumnType("bit");

                    b.Property<bool>("CallForPrice")
                        .HasColumnType("bit");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<int?>("DiscountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Height")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<bool>("IsDownload")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShippingCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialOffer")
                        .HasColumnType("bit");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Weight")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<decimal>("Width")
                        .HasColumnType("DECIMAL(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DeliveryDateId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("ShippingCostId");

                    b.HasIndex("UserId");

                    b.ToTable("Products", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAnswers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductQuestionId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("ProductAnswers", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAttributeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextPrompt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeControlTypeId");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_ProductAttribute_Mapping", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<Guid>("ProductAttributeMappingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeMappingId");

                    b.ToTable("ProductAttributeValues", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplyText")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentStatusId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductComments", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Media_Mapping", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("ProductQuestions", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("ProductTags", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductTagMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductTagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTagId");

                    b.ToTable("Product_Tag_Mappings", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.RelatedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RelatedProducts", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ShippingCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,3)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnabledTypeId");

                    b.ToTable("ShippingCosts", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("ShoppingCartItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems", "Application");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Core.CommentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CommentStatuses", "Core");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Core.EnabledType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EnabledTypes", "Core");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Core.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Genders", "Core");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Core.ViewStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ViewStatuses", "Core");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Financial.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BankTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaymentUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ServiceUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionCost")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerifyUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EnabledTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Banks", "Financial");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Financial.BankPort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Password")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("EnabledTypeId");

                    b.ToTable("BankPorts", "Financial");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.ActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityLogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogTypeId");

                    b.ToTable("ActivityLogs", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.ActivityLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogTypes", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.ContactUs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("ContactUsTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactUsTypeId");

                    b.ToTable("ContactUs", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.ContactUsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ContactUsTypes", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.EmailAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("Host")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EmailAccounts", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FaqGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("FaqGroupId");

                    b.ToTable("Faqs", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.FaqGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.ToTable("FaqGroups", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.GenericAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("KeyGroup")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenericAttributes", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageCultureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UniqueSeoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCultureId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("Languages", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.LanguageCulture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Seo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("LanguageCultures", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.LocaleStringResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceName")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("ResourceValue")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocaleStringResources", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltAttribute")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.ToTable("Medias", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.MediaBinary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("BinaryData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.ToTable("MediaBinaries", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Menus", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ParentId");

                    b.ToTable("MenuItems", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.MessageTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmailAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("MessageTemplates", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.QueuedEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmailAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("From")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FromName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("TimeSend")
                        .HasColumnType("datetime2");

                    b.Property<string>("To")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ToName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("QueuedEmails", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.UrlRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("EnabledTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UrlRecords", "General");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Center", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnabledTypeId");

                    b.ToTable("Centers", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Command", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommandTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CommandTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Commands", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.CommandType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CommandTypes", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("EnabledTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Departments", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.DepartmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DepartmentTypes", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.PasswordFormatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PasswordFormatTypes", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PositionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EnabledTypeId");

                    b.HasIndex("PositionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Positions", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.PositionRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.ToTable("PositionRoles", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.PositionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PositionTypes", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Roles", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CannotLoginUntilDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CellPhoneVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<int>("EnabledTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EnabledTypeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.UserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PasswordFormatTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PasswordFormatTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswords", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes", "Organization");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommentStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("ReadingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.Property<int>("VisitedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommentStatusId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("Blogs", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.BlogComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("CommentStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CommentStatusId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.BlogMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("MediaId");

                    b.ToTable("Blog_Media_Mapping", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("IX_Categories_ParentId1");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Categories_UserId1");

                    b.ToTable("Categories", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.DynamicPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IncludeInTopMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RemoverId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("DynamicPages", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.DynamicPageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("DynamicPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPageId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("DynamicPageDetails", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.Property<int>("VisitedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("Galleries", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.GalleryMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("MediaId");

                    b.ToTable("Gallery_Media_Mapping", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommentStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("ReadingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.Property<int>("VisitedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommentStatusId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("News", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.NewsComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("CommentStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentStatusId");

                    b.HasIndex("NewsId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsComments", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.NewsMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("MediaId1");

                    b.ToTable("News_Media_Mapping", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.StaticPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IncludeInTopMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RemoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RemoverId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewStatusId");

                    b.ToTable("StaticPages", "Portal");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Category", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany("ApplicationCategories")
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Application.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("ApplicationCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EnabledType");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.DeliveryDate", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany("DeliveryDates")
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EnabledType");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Order", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Financial.BankPort", "BankPort")
                        .WithMany("Orders")
                        .HasForeignKey("BankPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.UserAddress", "UserAddress")
                        .WithMany("Orders")
                        .HasForeignKey("UserAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BankPort");

                    b.Navigation("User");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.OrderDetail", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.OrderDetailAttribute", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.OrderDetail", "OrderDetail")
                        .WithMany("OrderDetailAttributes")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.OrderPaymentStatus", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Financial.BankPort", "BankPort")
                        .WithMany("OrderPaymentStatuses")
                        .HasForeignKey("BankPortId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Application.Order", "Order")
                        .WithMany("OrderPaymentStatuses")
                        .HasForeignKey("OrderId");

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("OrderPaymentStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankPort");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Product", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Application.DeliveryDate", "DeliveryDate")
                        .WithMany("Products")
                        .HasForeignKey("DeliveryDateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Application.DiscountType", "DiscountType")
                        .WithMany("Products")
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Application.ShippingCost", "ShippingCost")
                        .WithMany("Products")
                        .HasForeignKey("ShippingCostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DeliveryDate");

                    b.Navigation("DiscountType");

                    b.Navigation("ShippingCost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAnswers", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.ProductQuestion", "ProductQuestion")
                        .WithMany("ProductAnswers")
                        .HasForeignKey("ProductQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("ProductAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("ProductAnswers")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductQuestion");

                    b.Navigation("User");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAttributeMapping", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.AttributeControlType", "AttributeControlType")
                        .WithMany("ProductAttributeMappings")
                        .HasForeignKey("AttributeControlTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Application.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeMappings")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Application.Product", "Product")
                        .WithMany("ProductAttributeMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AttributeControlType");

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAttributeValue", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.ProductAttributeMapping", "ProductAttributeMapping")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeMappingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductAttributeMapping");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductComment", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.CommentStatus", "CommentStatus")
                        .WithMany("ProductComments")
                        .HasForeignKey("CommentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Application.ProductComment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Application.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("ProductComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CommentStatus");

                    b.Navigation("Parent");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductMedia", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.Media", "Media")
                        .WithMany("ProductMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Application.Product", "Product")
                        .WithMany("ProductMedias")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductQuestion", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.Product", "Product")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductTagMapping", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.Product", "Product")
                        .WithMany("ProductTagMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Application.ProductTag", "ProductTag")
                        .WithMany("ProductTagMappings")
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ShippingCost", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany("shippingCosts")
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EnabledType");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ShoppingCartItem", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Application.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Financial.Bank", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany("Banks")
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", null)
                        .WithMany("Banks")
                        .HasForeignKey("UserId");

                    b.Navigation("EnabledType");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Financial.BankPort", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Financial.Bank", "Bank")
                        .WithMany("BankPorts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany("BankPorts")
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("EnabledType");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.ActivityLog", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.ActivityLogType", "ActivityLogType")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ActivityLogTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActivityLogType");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.City", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.ContactUs", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.ContactUsType", "contactUsType")
                        .WithMany("ContactUs")
                        .HasForeignKey("ContactUsTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("contactUsType");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Faq", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.FaqGroup", "FaqGroup")
                        .WithMany("Faqs")
                        .HasForeignKey("FaqGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FaqGroup");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Language", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.LanguageCulture", "LanguageCulture")
                        .WithMany("Languages")
                        .HasForeignKey("LanguageCultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("Languages")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LanguageCulture");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.LocaleStringResource", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.Language", "Language")
                        .WithMany("LocaleStringResources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.MediaBinary", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.Media", "Media")
                        .WithOne()
                        .HasForeignKey("Lipar.Entities.Domain.General.MediaBinary", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Menu", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.Language", "Language")
                        .WithMany("Menus")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.MenuItem", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.General.MenuItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Menu");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.MessageTemplate", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.EmailAccount", "EmailAccount")
                        .WithMany("MessageTemplates")
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EmailAccount");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Province", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.QueuedEmail", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.EmailAccount", "EmailAccount")
                        .WithMany("QueuedEmails")
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EmailAccount");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.UrlRecord", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", null)
                        .WithMany("UrlRecords")
                        .HasForeignKey("EnabledTypeId");

                    b.HasOne("Lipar.Entities.Domain.General.Language", "Language")
                        .WithMany("UrlRecords")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Center", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany("Centers")
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnabledType");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Command", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.CommandType", "CommandType")
                        .WithMany("Commands")
                        .HasForeignKey("CommandTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.Command", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CommandType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Department", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.Center", "Center")
                        .WithMany("Departments")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.DepartmentType", "DepartmentType")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany("Departments")
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Center");

                    b.Navigation("DepartmentType");

                    b.Navigation("EnabledType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Position", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.Center", "Center")
                        .WithMany("Positions")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany()
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.PositionType", "PositionType")
                        .WithMany("Positions")
                        .HasForeignKey("PositionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("Positions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Department");

                    b.Navigation("EnabledType");

                    b.Navigation("PositionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.PositionRole", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.Position", "Position")
                        .WithMany("PositionRoles")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.Role", "Role")
                        .WithMany("PositionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Role", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.Center", "Center")
                        .WithMany("Roles")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.RolePermission", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.Command", "Command")
                        .WithMany("RolePermissions")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Command");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.User", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.EnabledType", "EnabledType")
                        .WithMany("Users")
                        .HasForeignKey("EnabledTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EnabledType");

                    b.Navigation("Gender");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.UserAddress", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.General.City", "City")
                        .WithMany("UserAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.General.Country", "Country")
                        .WithMany("UserAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.General.Province", "Province")
                        .WithMany("UserAddresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Province");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.UserPassword", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.PasswordFormatType", "PasswordFormatType")
                        .WithMany("UserPasswords")
                        .HasForeignKey("PasswordFormatTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("UserPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PasswordFormatType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Blog", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Portal.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.CommentStatus", "CommentStatus")
                        .WithMany("Blogs")
                        .HasForeignKey("CommentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.General.Language", "Language")
                        .WithMany("Blogs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("Blogs")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CommentStatus");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.BlogComment", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Portal.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.CommentStatus", "CommentStatus")
                        .WithMany("BlogComments")
                        .HasForeignKey("CommentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Portal.BlogComment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("BlogComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("CommentStatus");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.BlogMedia", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Portal.Blog", "Blog")
                        .WithMany("BlogMedias")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.General.Media", "Media")
                        .WithMany("BlogMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Category", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Portal.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("PortalCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.DynamicPage", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.User", "Remover")
                        .WithMany()
                        .HasForeignKey("RemoverId");

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("DynamicPages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("DynamicPages")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Remover");

                    b.Navigation("User");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.DynamicPageDetail", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Portal.DynamicPage", "DynamicPage")
                        .WithMany("DynamicPageDetails")
                        .HasForeignKey("DynamicPageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("DynamicPageDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("DynamicPageDetails")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DynamicPage");

                    b.Navigation("User");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Gallery", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("Galleries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("Galleries")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.GalleryMedia", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Portal.Gallery", "Gallery")
                        .WithMany("GalleryMedias")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.General.Media", "Media")
                        .WithMany("GalleryMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.News", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Portal.Category", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.CommentStatus", "CommentStatus")
                        .WithMany("News")
                        .HasForeignKey("CommentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.General.Language", "Language")
                        .WithMany("News")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("News")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CommentStatus");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.NewsComment", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Core.CommentStatus", "CommentStatus")
                        .WithMany("NewsComments")
                        .HasForeignKey("CommentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Portal.News", "News")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Portal.NewsComment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("NewsComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CommentStatus");

                    b.Navigation("News");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.NewsMedia", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Portal.News", "News")
                        .WithMany("NewsMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.General.Media", "Media")
                        .WithMany("NewsMedias")
                        .HasForeignKey("MediaId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.StaticPage", b =>
                {
                    b.HasOne("Lipar.Entities.Domain.Organization.User", "Remover")
                        .WithMany()
                        .HasForeignKey("RemoverId");

                    b.HasOne("Lipar.Entities.Domain.Organization.User", "User")
                        .WithMany("StaticPages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lipar.Entities.Domain.Core.ViewStatus", "ViewStatus")
                        .WithMany("StaticPages")
                        .HasForeignKey("ViewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Remover");

                    b.Navigation("User");

                    b.Navigation("ViewStatus");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.AttributeControlType", b =>
                {
                    b.Navigation("ProductAttributeMappings");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.DeliveryDate", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.DiscountType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderPaymentStatuses");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.OrderDetail", b =>
                {
                    b.Navigation("OrderDetailAttributes");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.Product", b =>
                {
                    b.Navigation("ProductAttributeMappings");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductMedias");

                    b.Navigation("ProductQuestions");

                    b.Navigation("ProductTagMappings");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeMappings");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductAttributeMapping", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductComment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductQuestion", b =>
                {
                    b.Navigation("ProductAnswers");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ProductTag", b =>
                {
                    b.Navigation("ProductTagMappings");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Application.ShippingCost", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Core.CommentStatus", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("Blogs");

                    b.Navigation("News");

                    b.Navigation("NewsComments");

                    b.Navigation("ProductComments");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Core.EnabledType", b =>
                {
                    b.Navigation("ApplicationCategories");

                    b.Navigation("BankPorts");

                    b.Navigation("Banks");

                    b.Navigation("Centers");

                    b.Navigation("DeliveryDates");

                    b.Navigation("Departments");

                    b.Navigation("shippingCosts");

                    b.Navigation("UrlRecords");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Core.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Core.ViewStatus", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("DynamicPageDetails");

                    b.Navigation("DynamicPages");

                    b.Navigation("Galleries");

                    b.Navigation("Languages");

                    b.Navigation("News");

                    b.Navigation("ProductAnswers");

                    b.Navigation("ProductQuestions");

                    b.Navigation("StaticPages");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Financial.Bank", b =>
                {
                    b.Navigation("BankPorts");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Financial.BankPort", b =>
                {
                    b.Navigation("OrderPaymentStatuses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.ActivityLogType", b =>
                {
                    b.Navigation("ActivityLogs");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.City", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.ContactUsType", b =>
                {
                    b.Navigation("ContactUs");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Country", b =>
                {
                    b.Navigation("Provinces");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.EmailAccount", b =>
                {
                    b.Navigation("MessageTemplates");

                    b.Navigation("QueuedEmails");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.FaqGroup", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Language", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("LocaleStringResources");

                    b.Navigation("Menus");

                    b.Navigation("News");

                    b.Navigation("UrlRecords");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.LanguageCulture", b =>
                {
                    b.Navigation("Languages");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Media", b =>
                {
                    b.Navigation("BlogMedias");

                    b.Navigation("GalleryMedias");

                    b.Navigation("NewsMedias");

                    b.Navigation("ProductMedias");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Menu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.MenuItem", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.General.Province", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Center", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Positions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Command", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.CommandType", b =>
                {
                    b.Navigation("Commands");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Department", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.DepartmentType", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.PasswordFormatType", b =>
                {
                    b.Navigation("UserPasswords");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Position", b =>
                {
                    b.Navigation("PositionRoles");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.PositionType", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.Role", b =>
                {
                    b.Navigation("PositionRoles");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.User", b =>
                {
                    b.Navigation("ApplicationCategories");

                    b.Navigation("Banks");

                    b.Navigation("BlogComments");

                    b.Navigation("Blogs");

                    b.Navigation("DynamicPageDetails");

                    b.Navigation("DynamicPages");

                    b.Navigation("Galleries");

                    b.Navigation("News");

                    b.Navigation("NewsComments");

                    b.Navigation("OrderPaymentStatuses");

                    b.Navigation("Orders");

                    b.Navigation("PortalCategories");

                    b.Navigation("Positions");

                    b.Navigation("ProductAnswers");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductQuestions");

                    b.Navigation("Products");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("StaticPages");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserPasswords");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.UserAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Organization.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Blog", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("BlogMedias");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.BlogComment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Category", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Children");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.DynamicPage", b =>
                {
                    b.Navigation("DynamicPageDetails");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.Gallery", b =>
                {
                    b.Navigation("GalleryMedias");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.News", b =>
                {
                    b.Navigation("NewsComments");

                    b.Navigation("NewsMedias");
                });

            modelBuilder.Entity("Lipar.Entities.Domain.Portal.NewsComment", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
